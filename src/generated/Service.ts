/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { ServiceId } from "./ServiceId";
import { ServiceName } from "./ServiceName";
import { OrganizationName } from "./OrganizationName";
import { DepartmentName } from "./DepartmentName";
import { CIDR } from "./CIDR";
import { MaxAllowedPaymentAmount } from "./MaxAllowedPaymentAmount";
import { OrganizationFiscalCode } from "./OrganizationFiscalCode";
import { ServiceMetadata } from "./ServiceMetadata";
import { withDefault } from "italia-ts-commons/lib/types";
import * as t from "io-ts";

/**
 * A Service tied to an user's subscription.
 */

// required attributes
const ServiceR = t.interface({
  service_id: ServiceId,

  service_name: ServiceName,

  organization_name: OrganizationName,

  department_name: DepartmentName,

  authorized_cidrs: t.readonlyArray(CIDR, "array of CIDR"),

  authorized_recipients: t.readonlyArray(t.string, "array of string"),

  organization_fiscal_code: OrganizationFiscalCode
});

// optional attributes
const ServiceO = t.partial({
  is_visible: withDefault(t.boolean, false),

  max_allowed_payment_amount: MaxAllowedPaymentAmount,

  version: t.Integer,

  id: t.string,

  require_secure_channels: withDefault(t.boolean, false),

  service_metadata: ServiceMetadata
});

export const Service = t.intersection([ServiceR, ServiceO], "Service");

export type Service = t.TypeOf<typeof Service>;
