// DO NOT EDIT THIS FILE
// This file has been generated by gen-api-models
// tslint:disable:max-union-size
// tslint:disable:no-identical-functions

import * as t from "io-ts";

import * as r from "italia-ts-commons/lib/requests";

import { Service } from "./Service";

import { ProblemJson } from "./ProblemJson";

import { DevelopmentProfile } from "./DevelopmentProfile";

import { ExtendedProfile } from "./ExtendedProfile";

import { SubscriptionKeys } from "./SubscriptionKeys";

/****************************************************************
 * getService
 */

// Request type definition
export type GetServiceT = r.IGetApiRequestType<
  { readonly service_id: string; readonly SubscriptionKey: string },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, Service>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, undefined>
>;

// Decodes the success response with a custom success type
export function getServiceDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(200, type),
      r.constantResponseDecoder<undefined, 401>(401, undefined)
    ),
    r.constantResponseDecoder<undefined, 404>(404, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const getServiceDefaultDecoder = () => getServiceDecoder(Service);

/****************************************************************
 * updateService
 */

// Request type definition
export type UpdateServiceT = r.IPutApiRequestType<
  {
    readonly service_id: string;
    readonly SubscriptionKey: string;
    readonly service?: Service;
  },
  "Content-Type" | "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, Service>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, undefined>
>;

// Decodes the success response with a custom success type
export function updateServiceDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(200, type),
      r.constantResponseDecoder<undefined, 401>(401, undefined)
    ),
    r.constantResponseDecoder<undefined, 404>(404, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const updateServiceDefaultDecoder = () => updateServiceDecoder(Service);

/****************************************************************
 * uploadServiceLogo
 */

// Request type definition
export type UploadServiceLogoT = r.IPutApiRequestType<
  { readonly service_id: string; readonly SubscriptionKey: string },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<201, undefined>
  | r.IResponseType<400, ProblemJson>
  | r.IResponseType<401, undefined>
  | r.IResponseType<403, undefined>
  | r.IResponseType<404, undefined>
  | r.IResponseType<500, undefined>
>;

// Decodes the success response with a custom success type
export function uploadServiceLogoDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.composeResponseDecoders(
            r.ioResponseDecoder<201, typeof type["_A"], typeof type["_O"]>(
              201,
              type
            ),
            r.ioResponseDecoder<
              400,
              typeof ProblemJson["_A"],
              typeof ProblemJson["_O"]
            >(400, ProblemJson)
          ),
          r.constantResponseDecoder<undefined, 401>(401, undefined)
        ),
        r.constantResponseDecoder<undefined, 403>(403, undefined)
      ),
      r.constantResponseDecoder<undefined, 404>(404, undefined)
    ),
    r.constantResponseDecoder<undefined, 500>(500, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const uploadServiceLogoDefaultDecoder = () =>
  uploadServiceLogoDecoder(t.undefined);

/****************************************************************
 * createService
 */

// Request type definition
export type CreateServiceT = r.IPostApiRequestType<
  { readonly SubscriptionKey: string; readonly service?: Service },
  "Content-Type" | "Ocp-Apim-Subscription-Key",
  never,
  r.IResponseType<200, Service> | r.IResponseType<401, undefined>
>;

// Decodes the success response with a custom success type
export function createServiceDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(200, type),
    r.constantResponseDecoder<undefined, 401>(401, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const createServiceDefaultDecoder = () => createServiceDecoder(Service);

/****************************************************************
 * createDevelopmentProfile
 */

// Request type definition
export type CreateDevelopmentProfileT = r.IPostApiRequestType<
  {
    readonly SubscriptionKey: string;
    readonly sandboxFiscalCode: string;
    readonly developmentProfile?: DevelopmentProfile;
  },
  "Content-Type" | "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, ExtendedProfile>
  | r.IResponseType<400, ProblemJson>
  | r.IResponseType<401, undefined>
  | r.IResponseType<409, ProblemJson>
  | r.IResponseType<429, undefined>
>;

// Decodes the success response with a custom success type
export function createDevelopmentProfileDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(
            200,
            type
          ),
          r.ioResponseDecoder<
            400,
            typeof ProblemJson["_A"],
            typeof ProblemJson["_O"]
          >(400, ProblemJson)
        ),
        r.constantResponseDecoder<undefined, 401>(401, undefined)
      ),
      r.ioResponseDecoder<
        409,
        typeof ProblemJson["_A"],
        typeof ProblemJson["_O"]
      >(409, ProblemJson)
    ),
    r.constantResponseDecoder<undefined, 429>(429, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const createDevelopmentProfileDefaultDecoder = () =>
  createDevelopmentProfileDecoder(ExtendedProfile);

/****************************************************************
 * getSubscriptionKeys
 */

// Request type definition
export type GetSubscriptionKeysT = r.IGetApiRequestType<
  { readonly SubscriptionKey: string; readonly service_id: string },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, SubscriptionKeys>
  | r.IResponseType<400, undefined>
  | r.IResponseType<403, undefined>
  | r.IResponseType<500, undefined>
>;

// Decodes the success response with a custom success type
export function getSubscriptionKeysDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(
          200,
          type
        ),
        r.constantResponseDecoder<undefined, 400>(400, undefined)
      ),
      r.constantResponseDecoder<undefined, 403>(403, undefined)
    ),
    r.constantResponseDecoder<undefined, 500>(500, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const getSubscriptionKeysDefaultDecoder = () =>
  getSubscriptionKeysDecoder(SubscriptionKeys);
